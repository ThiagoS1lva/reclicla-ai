import {
  useButtonProps
} from "./chunk-CVE2HRMP.js";
import {
  require_classnames
} from "./chunk-57GSEJPH.js";
import {
  require_jsx_runtime
} from "./chunk-35YZCWFM.js";
import {
  __toESM,
  require_react
} from "./chunk-OMFGQDFA.js";

// node_modules/react-bootstrap/esm/PageItem.js
var import_classnames = __toESM(require_classnames());
var React2 = __toESM(require_react());

// node_modules/@restart/ui/esm/Anchor.js
var React = __toESM(require_react());

// node_modules/@restart/hooks/esm/useCallbackRef.js
var import_react = __toESM(require_react());
function useCallbackRef() {
  return (0, import_react.useState)(null);
}

// node_modules/@restart/hooks/esm/useCommittedRef.js
var import_react2 = __toESM(require_react());
function useCommittedRef(value) {
  var ref = (0, import_react2.useRef)(value);
  (0, import_react2.useEffect)(function() {
    ref.current = value;
  }, [value]);
  return ref;
}
var useCommittedRef_default = useCommittedRef;

// node_modules/@restart/hooks/esm/useEventCallback.js
var import_react3 = __toESM(require_react());
function useEventCallback(fn) {
  var ref = useCommittedRef_default(fn);
  return (0, import_react3.useCallback)(function() {
    return ref.current && ref.current.apply(ref, arguments);
  }, [ref]);
}

// node_modules/@restart/hooks/esm/useEventListener.js
var import_react4 = __toESM(require_react());
function useEventListener(eventTarget, event, listener, capture) {
  if (capture === void 0) {
    capture = false;
  }
  var handler = useEventCallback(listener);
  (0, import_react4.useEffect)(function() {
    var target = typeof eventTarget === "function" ? eventTarget() : eventTarget;
    target.addEventListener(event, handler, capture);
    return function() {
      return target.removeEventListener(event, handler, capture);
    };
  }, [eventTarget]);
}

// node_modules/@restart/hooks/esm/useGlobalListener.js
var import_react5 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useInterval.js
var import_react6 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useRafInterval.js
var import_react7 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useMergeState.js
var import_react8 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useMounted.js
var import_react9 = __toESM(require_react());
function useMounted() {
  var mounted = (0, import_react9.useRef)(true);
  var isMounted = (0, import_react9.useRef)(function() {
    return mounted.current;
  });
  (0, import_react9.useEffect)(function() {
    mounted.current = true;
    return function() {
      mounted.current = false;
    };
  }, []);
  return isMounted.current;
}

// node_modules/@restart/hooks/esm/usePrevious.js
var import_react10 = __toESM(require_react());
function usePrevious(value) {
  var ref = (0, import_react10.useRef)(null);
  (0, import_react10.useEffect)(function() {
    ref.current = value;
  });
  return ref.current;
}

// node_modules/@restart/hooks/esm/useImage.js
var import_react11 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useResizeObserver.js
var import_react13 = __toESM(require_react());

// node_modules/@restart/hooks/esm/useIsomorphicEffect.js
var import_react12 = __toESM(require_react());
var isReactNative = typeof global !== "undefined" && // @ts-ignore
global.navigator && // @ts-ignore
global.navigator.product === "ReactNative";
var isDOM = typeof document !== "undefined";
var useIsomorphicEffect_default = isDOM || isReactNative ? import_react12.useLayoutEffect : import_react12.useEffect;

// node_modules/@restart/ui/esm/Anchor.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["onKeyDown"];
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function isTrivialHref(href) {
  return !href || href.trim() === "#";
}
var Anchor = React.forwardRef((_ref, ref) => {
  let {
    onKeyDown
  } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded);
  const [buttonProps] = useButtonProps(Object.assign({
    tagName: "a"
  }, props));
  const handleKeyDown = useEventCallback((e) => {
    buttonProps.onKeyDown(e);
    onKeyDown == null ? void 0 : onKeyDown(e);
  });
  if (isTrivialHref(props.href) || props.role === "button") {
    return (0, import_jsx_runtime.jsx)("a", Object.assign({
      ref
    }, props, buttonProps, {
      onKeyDown: handleKeyDown
    }));
  }
  return (0, import_jsx_runtime.jsx)("a", Object.assign({
    ref
  }, props, {
    onKeyDown
  }));
});
Anchor.displayName = "Anchor";
var Anchor_default = Anchor;

// node_modules/react-bootstrap/esm/PageItem.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var PageItem = React2.forwardRef(({
  active = false,
  disabled = false,
  className,
  style,
  activeLabel = "(current)",
  children,
  ...props
}, ref) => {
  const Component = active || disabled ? "span" : Anchor_default;
  return (0, import_jsx_runtime2.jsx)("li", {
    ref,
    style,
    className: (0, import_classnames.default)(className, "page-item", {
      active,
      disabled
    }),
    children: (0, import_jsx_runtime3.jsxs)(Component, {
      className: "page-link",
      ...props,
      children: [children, active && activeLabel && (0, import_jsx_runtime2.jsx)("span", {
        className: "visually-hidden",
        children: activeLabel
      })]
    })
  });
});
PageItem.displayName = "PageItem";
var PageItem_default = PageItem;
function createButton(name, defaultValue, label = name) {
  const Button = React2.forwardRef(({
    children,
    ...props
  }, ref) => (0, import_jsx_runtime3.jsxs)(PageItem, {
    ...props,
    ref,
    children: [(0, import_jsx_runtime2.jsx)("span", {
      "aria-hidden": "true",
      children: children || defaultValue
    }), (0, import_jsx_runtime2.jsx)("span", {
      className: "visually-hidden",
      children: label
    })]
  }));
  Button.displayName = name;
  return Button;
}
var First = createButton("First", "«");
var Prev = createButton("Prev", "‹", "Previous");
var Ellipsis = createButton("Ellipsis", "…", "More");
var Next = createButton("Next", "›");
var Last = createButton("Last", "»");

export {
  useCommittedRef_default,
  useEventCallback,
  useCallbackRef,
  useEventListener,
  useMounted,
  usePrevious,
  useIsomorphicEffect_default,
  Anchor_default,
  PageItem_default,
  First,
  Prev,
  Ellipsis,
  Next,
  Last
};
//# sourceMappingURL=chunk-MDR5XJD6.js.map
